// src/prompt_builder.js
// Generated by Codex Omega. Rigor Level: MEDIUM.
// REQ: Constructs a system prompt for Gemini detailing available MCP tools and XML syntax.
// BIAS_ACTION: Ensuring clarity in tool usage instructions for Gemini.

export function buildSystemPrompt(mcpServersAndTools, personalizedInstructionsText = '') {
    // REQ: Inform Gemini about available tools and invocation syntax.
    // BIAS_CHECK: Is the XML syntax clear and unambiguous for an LLM? Yes, specific tags are good.
    let systemPrompt = `You are a highly intelligent and precise assistant. Your task is to respond to user queries and, when necessary, utilize specialized tools provided by local Model Context Protocol (MCP) servers to gather information or perform actions.

${personalizedInstructionsText ? 'Key Directives for Our Interaction:\n' + personalizedInstructionsText + '\n\n' : ''}When you determine that an MCP tool is required to fulfill a user's request, you MUST format your request to use the tool within the following XML-like structure, and ONLY this structure:
<use_mcp_tool>
<server_name>SERVER_NAME_EXACTLY_AS_LISTED</server_name>
<tool_name>TOOL_NAME_EXACTLY_AS_LISTED</tool_name>
<arguments>
{
  "parameter_name_1": "value_for_parameter_1",
  "parameter_name_2": "value_for_parameter_2"
}
</arguments>
</use_mcp_tool>

IMPORTANT NOTES FOR TOOL USE:
1.  The <arguments> block MUST contain a valid JSON object.
2.  If a tool takes no arguments according to its schema, you can either provide an empty JSON object {} for <arguments> or completely omit the <arguments>...</arguments> block.
3.  Parameter names and types in the JSON object MUST match the tool's Input Schema exactly.
4.  server_name and tool_name MUST match the names listed below exactly.
5.  Only request one tool use at a time. Wait for the result of one tool before requesting another.

Available MCP Servers and Tools:
`;

    if (!mcpServersAndTools || mcpServersAndTools.length === 0) {
        systemPrompt += "\n- No MCP servers are currently connected or no tools are available from connected servers.\n";
    } else {
        mcpServersAndTools.forEach(server => {
            systemPrompt += `\n## MCP Server Name: "${server.name}"\n`;
            if (server.tools && server.tools.length > 0) {
                server.tools.forEach(tool => {
                    systemPrompt += `  ### Tool Name: "${tool.name}"\n`;
                    if (tool.description) {
                        systemPrompt += `    Description: ${tool.description}\n`;
                    } else {
                        systemPrompt += `    Description: (No description provided)\n`;
                    }
                    if (tool.inputSchema && typeof tool.inputSchema === 'object' && Object.keys(tool.inputSchema).length > 0) {
                        try {
                            // REQ: Pretty print JSON schema for readability.
                            const schemaString = JSON.stringify(tool.inputSchema, null, 2);
                            // Indent schema for better visual structure in the prompt.
                            const indentedSchema = schemaString.split('\n').map(line => `      ${line}`).join('\n');
                            systemPrompt += `    Input Schema (JSON Schema format):\n${indentedSchema}\n`;
                        } catch (e) {
                            // Codex Omega: Unlikely for valid schema, but handle defensively.
                            console.error(`[Prompt Builder] Error formatting schema for tool "${tool.name}" on server "${server.name}": ${e.message}`);
                            systemPrompt += `    Input Schema: (Error displaying schema)\n`;
                        }
                    } else {
                        systemPrompt += `    Input Schema: (This tool takes no arguments or schema is not specified)\n`;
                    }
                });
            } else {
                systemPrompt += "  (This server has no tools currently available or reported)\n";
            }
        });
    }

    // Placeholder for access_mcp_resource instructions if implemented later.
    // systemPrompt += `\n\nTo access an MCP resource (if any are listed with servers), use the following structure:\n`;
    // systemPrompt += `<access_mcp_resource> ... </access_mcp_resource>\n`;

    systemPrompt += "\nProceed with fulfilling user requests, utilizing these tools diligently and accurately when appropriate."
    return systemPrompt;
}
